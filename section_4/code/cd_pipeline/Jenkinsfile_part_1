#!/usr/bin/groovy

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    stages {

        stage("Build") {
            steps { buildApp() }
        }

        stage("Deploy - Dev") {
            steps { deploy('dev') }
        }

    }
}


// steps
def buildApp() {
    dir ('section_4/code/cd_pipeline' ) {
        def appImage = docker.build("hands-on-jenkins/myapp:${BUILD_NUMBER}")
    }
}

def deploy(environment) {

    def containerName = ''
    def port = ''

    if ("${environment}" == 'dev') {
        containerName = "myapp"
        port = "8888"
    } 
    else {
        println "Environment not valid"
        System.exit(0)
    }

    bat """
	@echo off
	echo Checking if container %containerName% exists...

	for /f %%i in ('docker ps -q -f "name=%containerName%" 2^>nul') do (
		echo Stopping container...
		docker stop %%i
	)

	for /f %%i in ('docker ps -aq -f "name=%containerName%" 2^>nul') do (
		echo Removing container...
		docker rm %%i
	)

	echo Starting new container...
	docker run -d -p ${port}:5000 --name ${containerName} hands-on-jenkins/myapp:${env.BUILD_NUMBER}
	"""
}
